// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var FPS, PERIOD, getR, hypot, isScratch, makeScratch, r0;

  FPS = 30;

  PERIOD = 1000 / FPS;

  r0 = 6;

  getR = function() {
    return r0;
  };

  hypot = function(p1, p2) {
    var dx, dy, x1, x2, y1, y2;
    x1 = p1.x, y1 = p1.y;
    x2 = p2.x, y2 = p2.y;
    dx = x2 - x1;
    dy = y2 - y1;
    return Math.sqrt(dx * dx + dy * dy);
  };

  makeScratch = function(el) {
    var $canvas, $el, canvas, context, height, left, toRel, top, width, _ref;
    $el = $(el);
    width = $el.innerWidth();
    height = $el.innerHeight();
    _ref = $el.offset(), top = _ref.top, left = _ref.left;
    $canvas = $('<canvas class="scratch-cover">').prependTo(el);
    canvas = $canvas[0];
    canvas.width = width;
    canvas.height = height;
    context = canvas.getContext('2d');
    context.fillStyle = '#666';
    context.fillRect(0, 0, width, height);
    $el.children().show();
    context.strokeStyle = '#000';
    context.lineCap = 'butt';
    context.lineJoin = 'round';
    toRel = function(P) {
      var x, y;
      x = P.x - left;
      y = P.y - top;
      return {
        x: x,
        y: y
      };
    };
    return {
      canvas: canvas,
      context: context,
      iid: null,
      start: function(p0) {
        var _this = this;
        context.beginPath();
        this.p0 = p0;
        this.distance = 0;
        return this.iid = setInterval((this.handler = function() {
          var speed;
          speed = _this.distance / PERIOD;
          _this.distance = 0;
          context.globalCompositeOperation = 'destination-out';
          context.lineWidth = 2 * getR(speed);
          return context.stroke();
        }), PERIOD);
      },
      draw: function(p) {
        var x, y;
        if (this.iid) {
          x = p.x, y = p.y;
          this.distance += hypot(this.p0, p);
          context.lineTo(x, y);
          return this.p0 = p;
        }
      },
      stop: function() {
        if (this.iid) {
          clearInterval(this.iid);
          return this.iid = null;
        }
      },
      auto: function(P) {
        var margin, p, x, y, _ref1;
        _ref1 = p = toRel(P), x = _ref1.x, y = _ref1.y;
        margin = getR(0) * 4;
        if ((-margin < x && x < width + margin) && (-margin < y && y < height + margin)) {
          if (this.iid) {
            return this.draw(p);
          } else {
            return this.start(p);
          }
        } else {
          return this.stop();
        }
      }
    };
  };

  isScratch = function(el) {
    return el instanceof HTMLCanvasElement && el.classList.contains('scratch-cover');
  };

  $(function() {
    var autoAll, isDown;
    window.scratches = $('.scratch').map(function() {
      return makeScratch(this);
    }).toArray();
    autoAll = function(e) {
      var P;
      P = {
        x: e.pageX,
        y: e.pageY
      };
      return window.scratches.forEach(function(sc) {
        return sc.auto(P);
      });
    };
    isDown = false;
    $(document).mousedown(function(e) {
      isDown = true;
      return autoAll(e);
    });
    $(document).mousemove(function(e) {
      if (isDown) return autoAll(e);
    });
    return $(document).mouseup(function(e) {
      isDown = false;
      return window.scratches.forEach(function(sc) {
        return sc.stop();
      });
    });
  });

}).call(this);
